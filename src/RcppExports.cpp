// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mating_tournament
NumericVector mating_tournament(const NumericVector pop_ind, const int candidates_n, const NumericVector fitness, const int parents_n);
RcppExport SEXP _gena_mating_tournament(SEXP pop_indSEXP, SEXP candidates_nSEXP, SEXP fitnessSEXP, SEXP parents_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type pop_ind(pop_indSEXP);
    Rcpp::traits::input_parameter< const int >::type candidates_n(candidates_nSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type fitness(fitnessSEXP);
    Rcpp::traits::input_parameter< const int >::type parents_n(parents_nSEXP);
    rcpp_result_gen = Rcpp::wrap(mating_tournament(pop_ind, candidates_n, fitness, parents_n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gena_mating_tournament", (DL_FUNC) &_gena_mating_tournament, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_gena(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
